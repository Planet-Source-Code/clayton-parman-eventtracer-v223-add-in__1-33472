VERSION 5.00
Begin {AC0714F6-3D04-11D1-AE7D-00A0C90F26F4} Connect 
   ClientHeight    =   6510
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   6195
   _ExtentX        =   10927
   _ExtentY        =   11483
   _Version        =   393216
   Description     =   $"Connect.dsx":0000
   DisplayName     =   "EventTracer"
   AppName         =   "Visual Basic"
   AppVer          =   "Visual Basic 6.0"
   LoadName        =   "None"
   RegLocation     =   "HKEY_CURRENT_USER\Software\Microsoft\Visual Basic\6.0"
   SatName         =   "EventTracer.dll"
   CmdLineSupport  =   -1  'True
End
Attribute VB_Name = "Connect"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
'       This project was written in, and formatted for, Courier New font.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
'
'  Author:  Clayton Parman
'
'    Date:  April 01, 2001
'
'    Desc:  Microsoft VB6 AddIn Connection template (generated by VB6)
'
'   Notes:  Additions include:
'           1. Getting the Forms previous position from the registry.
'           2. Auto setting (or not setting) the Focus (in the .Show method).
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'

Option Explicit

Const ModuleName              As String = "Connect"
 
Dim mcbMenuCommandBar         As Office.CommandBarControl
Dim mfrmAddIn                 As New frmAddIn

Public FormDisplayed          As Boolean
Public VBI                    As VBIDE.VBE          'VBI=VBInstance
Public WithEvents MenuHandler As CommandBarEvents   'Command bar event handler
Attribute MenuHandler.VB_VarHelpID = -1

Private Declare Function SetFocus Lib "user32" (ByVal hwnd As Long) As Long


Sub Hide()
 
   On Error Resume Next
    
   FormDisplayed = False
   mfrmAddIn.Hide
End Sub


Sub Show()
 
   On Error Resume Next
    
   If mfrmAddIn Is Nothing Then
      Set mfrmAddIn = New frmAddIn
   End If
    
   Set mfrmAddIn.VBI = VBI
   Set mfrmAddIn.Connect = Me
   
   FormDisplayed = True
   GetFormWinRegPos mfrmAddIn    'Get last position "before" displaying Form.
   
   mfrmAddIn.Show
   
   gbOpenedAllPanes = False    'Test each time the program is launched.
   
  'Setting the Focus to frmAddIn, triggers the frmAddIn "Form_Activate"
  'event which does not work after the "frmAddIn.Hide" (See HIDE above.)
  
  'However, this command "MUST NOT" execute when EventTracer is first
  'loaded, or it will cause EventTracer to go into an endless loop.
  
  '"gbOkToSetFocus=False" when EventTracer is first Started Up,
  'then "=True" after the frmAddIn "Form_Load" Event has triggered.
   
   If gbOkToSetFocus Then Call SetFocus(frmAddIn.hwnd)
   
End Sub

'------------------------------------------------------------------------------
'                     This method adds the Add-In to VB
'------------------------------------------------------------------------------

Private Sub AddinInstance_OnConnection _
           (ByVal Application As Object, _
            ByVal ConnectMode As AddInDesignerObjects.ext_ConnectMode, _
            ByVal AddInInst As Object, custom() As Variant)
 
   On Error GoTo ErrorHandler
   
   Set VBI = Application       'Save the VB Instance.
  
   Debug.Print VBI.FullName

   If ConnectMode = ext_cm_External Then
     'Used by the wizard toolbar to start this wizard.
      Me.Show
   Else
      Set mcbMenuCommandBar = AddToAddInCommandBar("EventTracer")
     'Sink the event
      Set Me.MenuHandler = VBI.Events.CommandBarEvents(mcbMenuCommandBar)
   End If
  
   If ConnectMode = ext_cm_AfterStartup Then
      If GetSetting(App.Title, "Settings", "DisplayOnConnect", "0") = "1" Then
        'Set this to display the form on connect.
         Me.Show
      End If
   End If
  
   Exit Sub
    
ErrorHandler:
    
   MsgBox Err.Description
    
End Sub

'------------------------------------------------------------------------------
'                 This method removes the Add-In from VB
'------------------------------------------------------------------------------

Private Sub AddinInstance_OnDisconnection _
       (ByVal RemoveMode As AddInDesignerObjects.ext_DisconnectMode, _
        custom() As Variant)
 
   On Error Resume Next
    
   mcbMenuCommandBar.Delete       'Delete the command bar entry.
    
  'Shut down the Add-In.
   If FormDisplayed Then
      SaveSetting App.Title, "Settings", "DisplayOnConnect", "1"
      FormDisplayed = False
   Else
      SaveSetting App.Title, "Settings", "DisplayOnConnect", "0"
   End If
    
   Unload mfrmAddIn
   Set mfrmAddIn = Nothing

End Sub


Private Sub IDTExtensibility_OnStartupComplete(custom() As Variant)
 
   If GetSetting(App.Title, "Settings", "DisplayOnConnect", "0") = "1" Then
    
      Me.Show       'Set this to display the form on connect.
      
   End If
End Sub


Private Sub MenuHandler_Click _
           (ByVal CommandBarControl As Object, _
            Handled As Boolean, CancelDefault As Boolean)
                              
   Me.Show    'This event fires when the menu is clicked in the IDE.
End Sub


Function AddToAddInCommandBar(sCaption As String) As Office.CommandBarControl
 
   Dim cbMenuCommandBar As Office.CommandBarControl  'CommandBar object.
   Dim cbMenu As Object
  
   On Error GoTo AddToAddInCommandBarErr
    
   Set cbMenu = VBI.CommandBars("Add-Ins")           'Find the Add-Ins menu.
   
   If cbMenu Is Nothing Then Exit Function           'Not available so we fail.
    
   Set cbMenuCommandBar = cbMenu.Controls.Add(1)     'Add it to CommandBar.
  
   cbMenuCommandBar.Caption = sCaption               'Set the caption.
   
   Set AddToAddInCommandBar = cbMenuCommandBar
    
   Exit Function
    
AddToAddInCommandBarErr:

End Function


Private Sub GetFormWinRegPos(MyForm As Form)

   On Error GoTo ErrorHandler    'Get the Forms last position from Registry.

   If MyForm Is Nothing Then Exit Sub

   With MyForm
      .Top = GetSetting(App.EXEName, .Name, "Top", .Top)
      .Left = GetSetting(App.EXEName, .Name, "Left", .Left)
      .WindowState = GetSetting _
                    (App.EXEName, .Name, "WindowState", .WindowState)
   End With
 
   Exit Sub
 
ErrorHandler:
 
   HandleError Err.Number, Erl, ModuleName, "GetFormWinRegPos", Outcome
 
   Select Case Outcome
      Case RS:    Resume
      Case Else:  Resume Next
   End Select
 
End Sub
